ABSTRACT CLASS- 
An abstract class is a class that cannot be instantiated. Typically, an abstract defines an interface for other classes to extend. Abstract
classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks

Eg:
<?php
abstract class Car {
  public $name;
  public function __construct($name) {
    $this->name = $name;
  }
  abstract public function intro() : string;
}
class Audi extends Car {
  public function intro() : string {
    return "Choose German quality! I'm an $this->name!";
  }
}
class Volvo extends Car {
  public function intro() : string {
    return "Proud to be Swedish! I'm a $this->name!";
  }
}
class Citroen extends Car {
  public function intro() : string {
    return "French extravagance! I'm a $this->name!";
  }
}
$audi = new audi("Audi");
echo $audi->intro();
echo "<br>";

$volvo = new volvo("Volvo");
echo $volvo->intro();
echo "<br>";

$citroen = new citroen("Citroen");
echo $citroen->intro();
?>

STATIC METHODS-
Static methods can be called directly - without creating an instance of the class first. Static methods are declared with the static keyword
Syntax-
ClassName::staticMethod();      // To access static method
Eg:
<?php
class greeting {
  public static function welcome() {
    echo "Hello World!";
  }
}
greeting::welcome();
?>

FINAL CLASS-
Final class is a class which prevents overriding a method of the child classes just by the final prefix with the definition.
Eg:
<?php
   final Class BaseClass{
      function printData($val1,$val2){
         $add=$val1+$val2;
         echo "Sum of given no=".$s;
         }
      }
   class Child extends BaseClass{
      function printData($val1,$val2){
         $m=$val1*$val2;
         echo "Multiplication of given no=".$m;
         }
      }
   $obj= new Child();
   $obj->printData(20,20);
?>
output:-
PHP Fatal error: Class Child may not inherit from final class (BaseClass)